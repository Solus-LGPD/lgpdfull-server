generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id          String   @id @default(cuid())
    name        String
    socialName  String
    isAdmin     Boolean  @default(false)
    companyName String
    email       String   @unique
    pass        String
    state       String
    status      Boolean? @default(true)

    dpo                    Dpo[]
    dataMapping            DataMapping[]
    sector                 Sector[]
    quiz                   Quiz[]
    progression            Progression[]
    ripd                   RIPD[]
    lia                    LIA[]
    incidents              Incidents[]
    AccessControl          AccessControl[]
    StorageData            StorageData[]
    ComunicationSecurity   ComunicationSecurity[]
    VunerabilityManagement VunerabilityManagement[]
    MobileDevices          MobileDevices[]
    CloudService           CloudService[]
    Cookies                Cookies[]
    SecurityPolicy         SecurityPolicy[]
    Training               Training[]
    Contracts              Contracts[]

    @@map("user")
}

model Dpo {
    id            String   @id @default(cuid())
    name          String
    socialName    String
    actual        Boolean  @default(true)
    naturalPerson Boolean
    email         String
    phone         String
    createdAt     DateTime @default(now())
    userId        String
    status        Boolean? @default(true)

    dataMapping DataMapping[]
    lia         LIA[]

    user      User        @relation(fields: [userId], references: [id])
    incidents Incidents[]

    @@map("dpo")
}

model DataMapping {
    id            String   @id @default(cuid())
    dpoId         String
    userId        String
    sectorId      String
    createdAt     DateTime @default(now())
    updatedAt     DateTime
    tagName       String
    sourceData    String
    colletedData  String
    reasonData    String
    howStorage    String
    securityData  String
    deadlineData  String
    justification String
    underAgeData  Boolean
    sensitiveData Boolean
    controller    String
    images        String?
    status        Boolean? @default(true)

    user   User    @relation(fields: [userId], references: [id])
    dpo    Dpo     @relation(fields: [dpoId], references: [id])
    sector Sector? @relation(fields: [sectorId], references: [id])
    RIPD   RIPD[]

    @@map("data_mapping")
}

model Sector {
    id      String   @id @default(cuid())
    userId  String
    tagName String
    status  Boolean? @default(true)

    dataMapping DataMapping[]
    user        User          @relation(fields: [userId], references: [id])

    @@map("sector")
}

model Quiz {
    id        String   @id @default(cuid())
    result    String
    answers   String
    userId    String
    createdAt DateTime @default(now())
    status    Boolean? @default(true)

    user User @relation(fields: [userId], references: [id])

    @@map("quiz")
}

model Progression {
    id               String   @id @default(cuid())
    arrayProgression String?
    userId           String   @unique
    status           Boolean? @default(true)

    user User @relation(fields: [userId], references: [id])

    @@map("progression")
}

model RIPD {
    id            String   @id @default(cuid())
    companyName   String
    mappingName   String
    dpoName       String
    justification String
    colletedData  String
    sourceData    String
    controller    String
    securityData  String
    deadlineData  String
    userId        String
    mappingId     String
    status        Boolean? @default(true)

    user        User        @relation(fields: [userId], references: [id])
    dataMapping DataMapping @relation(fields: [mappingId], references: [id])

    @@map("ripd")
}

model LIA {
    id            String   @id @default(cuid())
    liaQuestions  String
    justification String
    sector        String
    deadlineData  String
    createdAt     DateTime
    dpoName       String
    controller    String
    userId        String
    dpoId         String
    status        Boolean? @default(true)

    user User @relation(fields: [userId], references: [id])
    dpo  Dpo  @relation(fields: [dpoId], references: [id])

    @@map("lia")
}

model Incidents {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime
    dpoName   String
    condition String
    userId    String
    dpoId     String
    status    Boolean? @default(true)

    user User @relation(fields: [userId], references: [id])
    dpo  Dpo  @relation(fields: [dpoId], references: [id])

    @@map("incidents")
}

//Checklist TI

model AccessControl {
    id        String   @id @default(cuid())
    updatedAt DateTime
    check1    String?
    check2    String?
    check3    String?
    check4    String?
    check5    String?
    check6    String?
    check7    String?
    check8    String?
    userId    String

    user User @relation(fields: [userId], references: [id])

    @@map("access_control")
}

model StorageData {
    id        String   @id @default(cuid())
    updatedAt DateTime
    check1    String?
    check2    String?
    check3    String?
    check4    String?
    check5    String?
    check6    String?
    check7    String?
    check8    String?
    userId    String

    user User @relation(fields: [userId], references: [id])

    @@map("storage_data")
}

model ComunicationSecurity {
    id        String   @id @default(cuid())
    updatedAt DateTime
    check1    String?
    check2    String?
    check3    String?
    check4    String?
    check5    String?
    userId    String

    user User @relation(fields: [userId], references: [id])

    @@map("comunication_security")
}

model VunerabilityManagement {
    id        String   @id @default(cuid())
    updatedAt DateTime
    check1    String?
    check2    String?
    check3    String?
    check4    String?
    check5    String?
    userId    String

    user User @relation(fields: [userId], references: [id])

    @@map("vunerability_management")
}

model MobileDevices {
    id        String   @id @default(cuid())
    updatedAt DateTime
    check1    String?
    check2    String?
    check3    String?
    check4    String?
    userId    String

    user User @relation(fields: [userId], references: [id])

    @@map("mobile_devices")
}

model CloudService {
    id        String   @id @default(cuid())
    updatedAt DateTime
    check1    String?
    check2    String?
    userId    String

    user User @relation(fields: [userId], references: [id])

    @@map("cloud_service")
}

model Cookies {
    id        String   @id @default(cuid())
    updatedAt DateTime
    check1    String?
    userId    String

    user User @relation(fields: [userId], references: [id])

    @@map("cookies")
}

model SecurityPolicy {
    id        String   @id @default(cuid())
    updatedAt DateTime
    check1    String?
    userId    String

    user User @relation(fields: [userId], references: [id])

    @@map("security_policy")
}

model Training {
    id        String   @id @default(cuid())
    updatedAt DateTime
    check1    String?
    check2    String?
    userId    String

    user User @relation(fields: [userId], references: [id])

    @@map("training")
}

model Contracts {
    id        String   @id @default(cuid())
    updatedAt DateTime
    check1    String?
    check2    String?
    check3    String?
    userId    String

    user User @relation(fields: [userId], references: [id])

    @@map("contracts")
}

//
